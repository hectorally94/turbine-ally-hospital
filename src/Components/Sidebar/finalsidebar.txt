import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { BsArrowLeftCircle } from 'react-icons/bs';
import { AiFillPieChart } from 'react-icons/ai';
import { SiFuturelearn } from 'react-icons/si';
import { SiOpenaccess } from 'react-icons/si';
import { CgProfile } from 'react-icons/cg';
import { FaAddressBook } from 'react-icons/fa';
import HamburgerButton from '../HamburgerMenuButton/HamburgerButton';

interface MenuItem {
  title: string;
  path: string;
  icon: JSX.Element;
  gap?: string;
  submenus?: SubMenuItem[];
}

interface SubMenuItem {
  title: string;
  subpath: string;
  icon: JSX.Element;
}

const Tooltip: React.FC<{ title: string }> = ({ title }) => {
  return (
    <div className="absolute z-10 w-auto py-1 px-2 text-sm bg-gray-800 text-white rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300">
      {title}
    </div>
  );
};

export const AdminSidebar: React.FC = () => {
  const [open, setOpen] = useState(true);
  const [mobileMenu, setMobileMenu] = useState(false);
  const [submenuOpen, setSubmenuOpen] = useState<string | null>(null);

  const location = useLocation();

 
  const Menus: MenuItem[] = [
    { title: 'Dashboard', path: '/dashboard', icon:  <AiFillPieChart />,
     submenus: [
      { title: 'Submenu 1', subpath: '/submenu1', icon:  <AiFillPieChart />},
      { title: 'Submenu 2', subpath: '/submenu2', icon:  <AiFillPieChart /> },
    ] },
    { 
      title: 'Course', 
      path: '/course', 
      icon:  <SiFuturelearn />, 
      submenus: [
        { title: 'Submenu 1', subpath: '/course/submenu1', icon:  <SiFuturelearn /> },
        { title: 'Submenu 2',subpath: '/course/submenu2', icon:  <SiFuturelearn /> },
      ]
    },
    { title: 'Profile', path: '/profile', icon:  <CgProfile />, 
    submenus: [
      { title: 'Submenu 1', subpath: '/profile/submenu1', icon: <CgProfile />},
      { title: 'Submenu 2', subpath: '/profile/submenu2', icon:  <CgProfile /> },
    ]
   },
    { title: 'Signin', path: '/login', icon:  <SiOpenaccess />, gap: 'true', 

    submenus: [
      { title: 'Submenu 1', subpath: '/login/submenu1', icon: <SiOpenaccess />},
      { title: 'Submenu 2', subpath: '/login/submenu2', icon:  <SiOpenaccess /> },
    ]},
  ];

  const handleMenuClick = (path: string) => {
    setOpen(false);
    if (submenuOpen === path) {
      setSubmenuOpen(null);
    } else {
      setSubmenuOpen(path);
    }
  };

  const handleSubmenuClick = () => {
    setMobileMenu(false); // Close the sidebar
  };

  return (
    <>
      <div className={`${open ? 'w-60' : 'w-fit'} hidden sm:block relative h-screen duration-300 bg-gray-100 border-r border-gray-200 dark:border-gray-600 p-5 dark:bg-slate-800`}>
        <BsArrowLeftCircle
          className={`${!open && 'rotate-180'} absolute text-3xl bg-white fill-slate-800  rounded-full cursor-pointer top-9 -right-4 dark:fill-gray-400 dark:bg-gray-800`}
          onClick={() => setOpen(!open)}
        />
        <Link to='/'>
          <div className={`flex ${open && 'gap-x-4'} items-center`} onClick={() => setSubmenuOpen(null)}>
            <FaAddressBook/>
            {open && (
              <span className='text-xl font-medium whitespace-nowrap dark:text-white'>
                Goal Quest
              </span>
            )}
          </div>
        </Link>

        <ul className='pt-6'>
          {Menus.map((menu, index) => (
            <li key={index}>
              <div
                onClick={() => handleMenuClick(menu.path)}
                className={`flex items-center gap-x-6 p-3 text-base font-normal rounded-lg cursor-pointer dark:text-white hover:bg-gray-200 dark:hover:bg-gray-700 ${menu.gap ? 'mt-9' : 'mt-2'}`}
              >
                <span className='text-2xl relative group'>
                  {menu.icon}
                  <Tooltip title={menu.title} />
                </span>
                <span className={`${!open && 'hidden'} origin-left duration-300 hover:block`}>
                  {menu.title}
                </span>
              </div>
              {submenuOpen === menu.path && (
                <ul className="ml-6">
                  {menu.submenus?.map((submenu, subIndex) => (
                    <Link to={submenu.subpath} key={subIndex} onClick={handleSubmenuClick}>
                      <li
                        className={`flex items-center gap-x-6 p-3 text-base font-normal rounded-lg cursor-pointer dark:text-white hover:bg-gray-200 dark:hover:bg-gray-700 ${menu.gap ? 'mt-3' : 'mt-2'}`}
                      >
                        <span className='text-2xl relative group'>
                          {submenu.icon}
                          <Tooltip title={submenu.title} />
                        </span>
                        <span className={`${!open && 'hidden'} origin-left duration-300 hover:block`}>
                          {submenu.title}
                        </span>
                      </li>
                    </Link>
                  ))}
                </ul>
              )}
            </li>
          ))}
        </ul>
      </div>
      {/* Mobile Menu */}
      <div className="pt-3">
        <HamburgerButton
          setMobileMenu={setMobileMenu}
          mobileMenu={mobileMenu}
        />
      </div>
      <div className="sm:hidden">
        <div
          className={`${
            mobileMenu ? 'flex' : 'hidden'
          } absolute z-50 flex-col items-center self-end py-8 mt-16 space-y-6 font-bold sm:w-auto left-6 right-6 dark:text-white  bg-gray-50 dark:bg-slate-800 drop-shadow md rounded-xl`}
        >
          {Menus.map((menu, index) => (
            <div key={index}>
              <span
                className={` ${
                  location.pathname === menu.path &&
                  'bg-gray-200 dark:bg-gray-700'
                } p-2 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-700`}
                onClick={() => handleMenuClick(menu.path)}
              >
                {menu.title}
              </span>
              {submenuOpen === menu.path && (
                <ul className="ml-6">
                  {menu.submenus?.map((submenu, subIndex) => (
                    <Link to={submenu.subpath} key={subIndex} onClick={handleSubmenuClick}>
                      <li
                        className={`flex items-center gap-x-6 p-3 text-base font-normal rounded-lg cursor-pointer dark:text-white hover:bg-gray-200 dark:hover:bg-gray-700 ${menu.gap ? 'mt-3' : 'mt-2'}`}
                      >
                        <span className='text-2xl relative group'>
                          {submenu.icon}
                          <Tooltip title={submenu.title} />
                        </span>
                        <span className={`${!open && 'open'} origin-left duration-300 hover:block`}>
                          {submenu.title}
                        </span>
                      </li>
                    </Link>
                  ))}
                </ul>
              )}
            </div>
          ))}
        </div>
      </div>
    </>
  );
};
